// backend/pulse_worker.js
// Lazy loading –¥–ª—è Octokit - –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –ø–∞–∫–µ—Ç–∞ –Ω–µ—Ç
function getOctokit() {
  try { 
    return require("@octokit/rest").Octokit; 
  } catch { 
    return null; // –Ω–µ—Ç –ø–∞–∫–µ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∏–º pulse
  }
}

// ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const PULSE_ENABLED = process.env.PULSE_ENABLED === 'true';
const PULSE_INTERVAL_MS = parseInt(process.env.PULSE_INTERVAL_MS || '300000'); // 5 –º–∏–Ω—É—Ç
const TIMEZONE_OFFSET = parseInt(process.env.TIMEZONE_OFFSET || '3'); // UTC+3 –¥–ª—è –ö–∏–ø—Ä–∞

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á—ë—Ç–æ–º timezone
function getCyprusTime() {
  const now = new Date();
  now.setHours(now.getHours() + TIMEZONE_OFFSET);
  return now.toISOString().replace('T', ' ').split('.')[0] + ' UTC+3';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è pulse
async function pulseHeartbeat(octokit) {
  const timestamp = getCyprusTime();
  const heartbeatData = {
    timestamp,
    service: 'offerspsp-mvp',
    status: 'alive',
    env: {
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT,
      PULSE_INTERVAL_MS,
      TIMEZONE_OFFSET
    },
    uptime: process.uptime(),
    memory: process.memoryUsage()
  };

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å HEARTBEAT.json –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    const path = 'backend/HEARTBEAT.json';
    const content = JSON.stringify(heartbeatData, null, 2);
    const message = `üíì Pulse: ${timestamp}`;

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª (–¥–ª—è SHA)
    let sha;
    try {
      const { data } = await octokit.rest.repos.getContent({
        owner: 'guannko',
        repo: 'offerspsp-mvp',
        path
      });
      sha = data.sha;
    } catch (e) {
      // –§–∞–π–ª–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π
      console.log('Creating new HEARTBEAT.json');
    }

    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
    await octokit.rest.repos.createOrUpdateFileContents({
      owner: 'guannko',
      repo: 'offerspsp-mvp',
      path,
      message,
      content: Buffer.from(content).toString('base64'),
      sha // undefined –µ—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    });

    console.log(`üíì Pulse sent: ${timestamp}`);
  } catch (error) {
    console.error('‚ùå Pulse error:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ pulse engine
function startPulse() {
  if (!PULSE_ENABLED) {
    console.log('üí§ Pulse Engine: DISABLED by config');
    return () => {};
  }

  if (!GITHUB_TOKEN) {
    console.warn('‚ö†Ô∏è Pulse Engine: No GITHUB_TOKEN, disabled');
    return () => {};
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Octokit
  const OctokitCtor = getOctokit();
  if (!OctokitCtor) {
    console.warn("‚ö†Ô∏è Pulse: @octokit/rest missing. Pulse disabled.");
    return () => {};
  }

  // –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ GitHub
  const octokit = new OctokitCtor({ auth: GITHUB_TOKEN });

  console.log(`üíì Pulse Engine: STARTING (interval: ${PULSE_INTERVAL_MS}ms)`);
  
  // –ü–µ—Ä–≤—ã–π –ø—É–ª—å—Å —Å—Ä–∞–∑—É
  pulseHeartbeat(octokit);
  
  // –ó–∞—Ç–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
  const intervalId = setInterval(() => {
    pulseHeartbeat(octokit);
  }, PULSE_INTERVAL_MS);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  return () => {
    clearInterval(intervalId);
    console.log('üíî Pulse Engine: STOPPED');
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server_v3.js
module.exports = { startPulse };
